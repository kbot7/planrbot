@inject HttpClient Http
@inject ILogger<WeekView> Logger

@page "/week"
@using Planrbot.Models;

<MudDatePicker @ref="_picker" @bind-Date=WeekDate @bind-Date:after="ExecuteQuery" ShowWeekNumbers="true" PickerVariant="PickerVariant.Dialog" />

<div class="d-flex flex-column gap-4">
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Prev">Last Week</MudButton>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Today">This Week</MudButton>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Next">Next Week</MudButton>
</div>

@if (todoItems != null && todoItems.Any())
{
    <MudGrid>
        @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
        {
            <MudItem xs="12" md="6">
                <DayToDoListCard Day="day" Items="todoItems.Where(t => t.Date.DayOfWeek == day)" />
            </MudItem>
        }
    </MudGrid>
}

@code {

    MudDatePicker _picker;
    private async Task Today()
    {
        await _picker.GoToDate(DateTime.Today);
    }
    private async Task Next()
    {
        await _picker.GoToDate(DateTime.Today.AddDays(7));
    }
    private async Task Prev()
    {
        await _picker.GoToDate(DateTime.Today.AddDays(-7));
    }

    private ToDoItem[]? todoItems;

    private async Task ExecuteQuery()
    {
        try
        {
            todoItems = await Http.GetFromJsonAsync<ToDoItem[]>($"api/ToDo?date={WeekDate:s}");
        }
        //catch (AccessTokenNotAvailableException exception)
        //{
        //    exception.Redirect();
        //}
        catch (Exception ex){}
        StateHasChanged();
    }

    private async Task ItemChanged(ToDoItem item)
    {
        Logger.LogInformation("Item Changed | Item: {0}", item);
        var response = await Http.PostAsJsonAsync<ToDoItem>($"api/ToDo/{item.Id}", item);
        Logger.LogInformation("Item Saved Response | Response: {0}", response);
    }

    protected override async Task OnInitializedAsync()
    {
        WeekDate = DateTime.Today;
        await ExecuteQuery();
        await base.OnInitializedAsync();
    }

    public DateTime? WeekDate
    {
        get => _weekDate;
        set
        {
            if (value != null)
            {
                var date = (DateTime)value;
                _weekDate = date.AddDays(-(int)date.DayOfWeek);
            }
        }
    }
    private DateTime _weekDate;

}
