@inject HttpClient Http
@inject ILogger<WeekView> Logger

@using Fluxor
@using Planrbot.Frontend.Store.TodoUseCase
@using Planrbot.Frontend.Store;
@using Planrbot.Models;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<GetWeekState> _todoState

@page "/week"


<MudDatePicker @ref="_picker" @bind-Date=WeekDate @bind-Date:after="ExecuteQuery" ShowWeekNumbers="true" PickerVariant="PickerVariant.Dialog" />

<MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
    <MudButton OnClick="LastWeek">Last Week</MudButton>
    <MudButton OnClick="ThisWeek">This Week</MudButton>
    <MudButton OnClick="NextWeek">Next Week</MudButton>
</MudButtonGroup>

@if (_todoState.Value.IsLoading)
{
    <p><em>Loading...</em></p>
} else
{
    @if (_todoState.Value.ToDoItems != null && _todoState.Value.ToDoItems.Any())
    {
        <div style=" overflow-x: auto; width: 100%">
        </div>
        <MudGrid>
            @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
            {
                <MudItem>
                    <DayToDoListCard Day="day" Items="_todoState.Value.ToDoItems.Where(t => t.Date.DayOfWeek == day)" />
                </MudItem>
            }
        </MudGrid>
    }
}

@code {

    MudDatePicker _picker;
    private async Task ThisWeek()
    {
        await _picker.GoToDate(DateTime.Today);
    }
    private async Task NextWeek()
    {
        await _picker.GoToDate(DateTime.Today.AddDays(7));
    }
    private async Task LastWeek()
    {
        await _picker.GoToDate(DateTime.Today.AddDays(-7));
    }

    [Inject]
    public IDispatcher? Dispatcher { get; set; }

    protected override void OnInitialized()
    {
        WeekDate ??= DateTime.Today;
        Dispatcher?.Dispatch(new GetWeekAction(WeekDate.Value));
        base.OnInitialized();
    }


    private void ExecuteQuery()
    {
        WeekDate ??= DateTime.Today;
        Dispatcher?.Dispatch(new GetWeekAction(WeekDate.Value));
        StateHasChanged();
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    //WeekDate = DateTime.Today;
    //    //await ExecuteQuery();
    //    await base.OnInitializedAsync();
    //}

    public DateTime? WeekDate
    {
        get => _weekDate;
        set
        {
            if (value != null)
            {
                var date = (DateTime)value;
                _weekDate = date.AddDays(-(int)date.DayOfWeek);
            }
        }
    }
    private DateTime _weekDate;

}
