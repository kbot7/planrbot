@inject HttpClient Http

@page "/week"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Planrbot.Models;
<h3>Week View</h3>

<input  value=@WeekDate @onchange=FilterChangedAsync type="date" id="week" name="week"
       min="2023-01-01" max="2023-12-31">

<p>@WeekDate</p>

@if (todoItems != null && todoItems.Any())
{
    <div class="week-container">
        <div class="day-container">
            <DayList Day="DayOfWeek.Sunday" Items="todoItems.Where(t => t.Date.DayOfWeek == DayOfWeek.Sunday)" />
        </div>
        <div class="day-container">
            <DayList Day="DayOfWeek.Monday" Items="todoItems.Where(t => t.Date.DayOfWeek == DayOfWeek.Monday)" />
        </div>
        <div class="day-container">
            <DayList Day="DayOfWeek.Tuesday" Items="todoItems.Where(t => t.Date.DayOfWeek == DayOfWeek.Tuesday)" />
        </div>
        <div class="day-container">
            <DayList Day="DayOfWeek.Wednesday" Items="todoItems.Where(t => t.Date.DayOfWeek == DayOfWeek.Wednesday)" />
        </div>
        <div class="day-container">
            <DayList Day="DayOfWeek.Thursday" Items="todoItems.Where(t => t.Date.DayOfWeek == DayOfWeek.Thursday)" />
        </div>
        <div class="day-container">
            <DayList Day="DayOfWeek.Friday" Items="todoItems.Where(t => t.Date.DayOfWeek == DayOfWeek.Friday)" />
        </div>
        <div class="day-container">
            <DayList Day="DayOfWeek.Saturday" Items="todoItems.Where(t => t.Date.DayOfWeek == DayOfWeek.Saturday)" />
        </div>
    </div>
}




@code {

    private ToDoItem[]? todoItems;

    private async Task ExecuteQuery()
    {
        try
        {
            todoItems = await Http.GetFromJsonAsync<ToDoItem[]>($"api/ToDo?date={WeekDate:s}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task FilterChangedAsync(ChangeEventArgs args)
    {
        WeekDate = DateTime.Parse(args.Value.ToString());
        await ExecuteQuery();
        StateHasChanged();
    }

    public DateTime WeekDate
    {
        get => _weekDate;
        set
        {
            if (value != null)
            {
                var date = (DateTime)value;
                _weekDate = date.AddDays(-(int)date.DayOfWeek);
            }
        }
    }
    private DateTime _weekDate;

}
